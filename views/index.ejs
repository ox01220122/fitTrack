<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://kit.fontawesome.com/693f483c38.js"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>Document</title>
    <style>
      body {
        margin: 0px;
      }

      /* ----------고정 상단바 ---------------------------------------------- */
      .defaultSetting {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
      }

      .mainTitle {
        background-color: rgb(182, 182, 182);
        padding: 20px;
        text-align: center;
        font-size: 40px;
      }
      .buttonBar {
        background-color: black;
        color: white;
        display: flex;
        justify-content: flex-end;
      }

      .buttonBar > .mypost,
      .buttonBar > .write,
      .buttonBar > .list {
        padding: 10px;
        cursor: pointer;
      }
      .buttonBar > .search {
        padding: 10px;
      }

      .buttonBar > .mypost:hover,
      .buttonBar > .write:hover,
      .buttonBar > .list:hover {
        background-color: white;
        color: black;
      }
      /* ------------------------------------------------------------------------------------- */
      .bestPost {
        background-color: rgb(124, 173, 155);
        margin-top: 140px;
      }
      .mostRecentPost {
        background-color: rgb(124, 173, 155);
      }

      /* 게시글의 top bar ! margin-top으로 게시물 사이 간격 조정하기 */
      .bordTopbar {
        background-color: rgb(71, 71, 75);
        margin-top: 50px;
        margin-left: 50px;
        margin-right: 50px;
        /* padding-bottom: 15px; */
        height: 7vh;
        color: white;
        border-bottom: 1px solid black;
        display: flex; /* Flexbox 적용 */
        justify-content: space-between; /* 좌우 정렬 */
        align-items: center; /* 세로 가운데 정렬 */
        font-size: 15px;
      }

      .userContainer {
        display: flex;
        align-items: center;
        font-size: 15px;
      }
      /* 게시글의 내용  */
      .bordContent {
        background-color: rgb(225, 128, 225);
        margin-left: 50px;
        margin-right: 50px;
        padding-bottom: 170px;
        color: white;
        font-size: 15px;
      }
      .bordContentTitle {
        background-color: green;
        display: flex;
        justify-content: center;
        /* align-items: center; */
      }
      .bordContentContent {
        background-color: blue;
        display: flex;
        justify-content: center;
        padding: 20px;
      }

      .denoteTitle {
        display: flex;
        justify-content: center;
      }
      .denoteContent {
        display: flex;
        justify-content: center;
      }

      /* 게시글의 댓글 */
      .bordComment {
        background-color: rgb(108, 150, 122);
        margin-left: 50px;
        margin-right: 50px;
        /* padding-bottom: 2vh; */
        /* border-bottom: 4vh; */
        height: 5vh;
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .sendComment {
        width: 70%;
      }

      /* ----------------------------------------------------------------------- */
      .bordInputComment {
        width: 70%;
        height: 50%;
        resize: none;
      }
      .empty_heart {
        cursor: auto;
      }
    </style>
  </head>
  <!-- 고정 상단바 -->
  <body>
    <div class="defaultSetting">
      <div class="mainTitle">Fit Track</div>
      <div class="buttonBar">
        <div class="mypost" onclick="mypostButton()">내 게시물</div>
        <div class="write" onclick="writeButton()">쓰기</div>
        <div class="list" onclick="listButton()">목록</div>
        <div class="search">
          <input
            type="text"
            class="search"
            id="search"
            name="search"
            autocomplete="off"
          />
          <button id="searchButton" onclick="search()">검색</button>
        </div>
      </div>
    </div>

    <!-- bestPost, recentPost -->
    <div class="bestPost">
      <hr />
      <div>BEST POST</div>
      <hr />
    </div>

    <!-- 데이터베이스가 비어있을 경우, like_count가 0일 경우 BEST POST 출력 -->
    <ol>
      <%let noPostCount = 0 %> <% if (bestPost.length === 0) { %>
      <div>게시물이 없습니다</div>
      <% } else { %> <% for (let i = 0; i < bestPost.length; i++) { %> <% if
      (bestPost[i].like_count === 0) { %> <% ++noPostCount %> <% continue%> <% }
      else { %>
      <hr />
      <li><%= bestPost[i].title %></li>
      <hr />
      <% } %> <% } %> <% } %> <% if(noPostCount == bestPost.length) {%>
      <div>Best 게시물이 없습니다</div>
      <%}%>
    </ol>

    <div class="mostRecentPost">
      <hr />
      <div>Most Recent Post</div>
      <hr />
    </div>

    <!------------------------게시물 띄우기!!!---------------------------------------------------->
    <% if (searchAllData.length === 0) { %>
    <div class="noPosts">게시물이 없습니다.</div>
    <% } else { %> <% for (let i = 0; i < searchAllData.length; i++) { %>
    <!-- 게시물을 띄우는 창 -->
    <div class="postBord">
      <!-- 게시물 쓰기 창의 topbar -->
      <div class="bordTopbar">
        <div class="userContainer">
          <div class="userIcon">
            &nbsp;&nbsp;<i
              class="fa-solid fa-user fa-xl"
              style="color: #ffff"
            ></i>
          </div>
          <div class="userId">&nbsp;<%= searchAllData[i].user_id %></div>
        </div>
        <div class="timeNow">
          <%= searchAllData[i].created_date.toISOString().split('T')[0] %> <%
          const timeParts = searchAllData[i].created_time.split(':'); %> <%=
          timeParts[0] %>:<%= timeParts[1] %>&nbsp;&nbsp;
        </div>
      </div>
      <div class="bordContent">
        <span class="denoteTitle">title</span>
        <br />
        <div class="bordContentTitle"><%= searchAllData[i].title %><br /></div>
        <span class="denoteContent">content</span>
        <br />
        <div class="bordContentContent"><%= searchAllData[i].content %></div>
      </div>
      <div class="bordComment">
        <!-- <br /> -->
        <!-- 비어있는 하트 -->
        <div class="heartNum">
          <i
            id="empty_heart"
            class="fa-regular fa-heart fa-xl"
            style="color: #db0606"
            onclick="clickHeart()"
          ></i>
          <%= searchAllData[i].like_count %>
        </div>

        <div class="sendComment">
          <textarea
            rows="1"
            cols="50"
            class="bordInputComment"
            id="bordInputComment"
            placeholder="Comment"
          ></textarea>
          <!-- 전송버튼 -->
          <i
            class="fa-regular fa-paper-plane fa-xl"
            style="color: #000000"
            id="sendButton"
          ></i>
        </div>
      </div>
    </div>
    <% } %> <% } %>
  </body>

  <script>
    const postBord = document.querySelector(".postBord");
    const write = document.querySelector(".write");
    const list = document.querySelector(".list");
    const writeBord = document.querySelector(".writeBord");
    //localhost:8000/write
    function writeButton() {
      window.location.href = "/write";
    }
    //localhost:8000/list
    function listButton() {
      window.location.href = "/list";
    }

    //localhost:8000/search
    function search() {
      //검색 눌렀을 경우 데이터 베이스에서 일치하는 단어 있는 쿼리문 가져오기
      const searchInput = document.getElementById("search");
      console.log("검색어 : ", searchInput.value);
      if (!searchInput.value) {
        alert("검색어를 입력하세요");
      } else {
        //검색 페이지 렌더링
        axios({
          method: "GET",
          url: "/search",
          params: { keyword: searchInput.value }, // 데이터를 params에 담아 전송
        }).then((res) => {
          const data = res.data.searchData;
          console.log("data", data);
          // window.location.href = "/search?keyword=" + encodeURIComponent(data);
        });
        window.location.href = "/search";
      }
    }

    //하트 눌렀을 경우 like_count ++ 해주기
    function clickHeart() {
      const heartIcon = document.querySelector(".fa-heart");

      if (heartIcon.className == "fa-regular fa-heart fa-xl") {
        //좋아요
        heartIcon.className = "fa-solid fa-heart fa-xl";
        heartIcon.style.color = "#ff0000";

        // axios({
        //   method: "PATCH",
        //   url: "/user/profile/edit",
        //   data: { like_count: form.id.value },
        // }).then((res) => {
        //   if (res.data.result) {
        //     alert("회원정보 수정완료!!!");
        //   }
        // });
      } else {
        // 따로 user테이블 만들어서 좋아요 클릭, 좋아요 누른 게시물 post_id저장 해야할듯
        //좋아요 취소
        heartIcon.className = "fa-regular fa-heart fa-xl";
      }
    }
  </script>
</html>
